"C:\Program Files\Java\jdk-19\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2022.3.1\lib\idea_rt.jar=61629:C:\Program Files\JetBrains\IntelliJ IDEA 2022.3.1\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath C:\Users\17434\Downloads\antlr-4.13.0-complete\META-INF\maven\org.antlr\Test\target\classes;C:\Users\17434\Downloads\antlr-4.13.0-complete\META-INF\maven\org.antlr\Test\lib\antlr-4.12.0-complete.jar org.java.ChannelCreationAnalyzer
line 204:63 no viable alternative at input 'if let Some(ref watcher) = *watcher {\r\n        loop {\r\n            let event = match watcher.receiver.try_recv() {\r\n                Ok(result) => result.unwrap(),\r\n                Err(TryRecvError::Empty) => break,\r\n                Err(TryRecvError::Disconnected) => panic!("FilesystemWatcher disconnected."),\r\n            };\r\n\r\n            if let notify::event::Event {\r\n                kind: notify::event::EventKind::Modify(_),\r\n                paths,\r\n                ..\r\n            } = event\r\n            {\r\n                for path in &paths {\r\n                    let Some(set) = watcher.path_map.get(path) else'
line 194:92 mismatched input ',' expecting ';'
line 839:114 mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
line 517:46 no viable alternative at input 'match cmd {\r\n            // ==== Modal ====\r\n            EnableModal => {}\r\n            DisableModal => {}\r\n\r\n            // ==== Files / Folders ====\r\n            OpenFolder => {\r\n                if !self.workspace.kind.is_remote() {\r\n                    let window_command = self.common.window_command;\r\n                    let options = FileDialogOptions::new().select_directories();\r\n                    self.common.view_id.get_untracked().open_file(\r\n                        options,\r\n                        move |file| {\r\n                            if let Some(file) = file {\r\n                                let workspace = LapceWorkspace {\r\n                                    kind: LapceWorkspaceType::Local,\r\n                                    path: Some(file.path),\r\n                                    last_open: std::time::SystemTime::now()\r\n                                        .duration_since(std::time::UNIX_EPOCH)\r\n                                        .unwrap()\r\n                                        .as_secs(),\r\n                                };\r\n                                window_command\r\n                                    .send(WindowCommand::SetWorkspace { workspace });\r\n                            }\r\n                        },\r\n                    );\r\n                }\r\n            }\r\n            CloseFolder => {\r\n                if !self.workspace.kind.is_remote() {\r\n                    let window_command = self.common.window_command;\r\n                    let workspace = LapceWorkspace {\r\n                        kind: LapceWorkspaceType::Local,\r\n                        path: None,\r\n                        last_open: 0,\r\n                    };\r\n                    window_command.send(WindowCommand::SetWorkspace { workspace });\r\n                }\r\n            }\r\n            OpenFile => {\r\n                if !self.workspace.kind.is_remote() {\r\n                    let internal_command = self.common.internal_command;\r\n                    let options = FileDialogOptions::new();\r\n                    self.common.view_id.get_untracked().open_file(\r\n                        options,\r\n                        move |file| {\r\n                            if let Some(file) = file {\r\n                                internal_command.send(InternalCommand::OpenFile {\r\n                                    path: file.path,\r\n                                })\r\n                            }\r\n                        },\r\n                    );\r\n                }\r\n            }\r\n            NewFile => {\r\n                // TODO: needs scratch files\r\n            }\r\n            RevealActiveFileInFileExplorer => {\r\n                if let Some(editor_data) = self.main_split.active_editor.get() {\r\n                    editor_data.with_untracked(|editor_data| {\r\n                        let path = editor_data.view.doc.with_untracked(|doc| {\r\n                            if let DocContent::File(path) = &doc.content {\r\n                                Some(path.clone())\r\n                            } else {\r\n                                None\r\n                            }\r\n                        });\r\n                        let Some(path) = path else'
line 451:25 no viable alternative at input 'DisableModal =>'
line 596:25 mismatched input ')' expecting ';'
line 951:49 mismatched input ',' expecting ';'
line 971:82 extraneous input ')' expecting ';'
line 972:24 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 976:73 extraneous input ')' expecting ';'
line 977:32 no viable alternative at input 'self.'
line 1016:32 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1027:26 no viable alternative at input 'InstallToPATH =>'
line 1029:30 no viable alternative at input 'UninstallFromPATH =>'
line 1770:0 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 2053:8 mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
line 388:8 mismatched input '_' expecting {'break', 'const', 'continue', 'crate', 'enum', 'extern', 'false', 'fn', 'for', 'if', 'impl', 'let', 'loop', 'match', 'mod', 'move', 'pub', 'return', 'self', 'Self', 'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use', 'while', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, CHAR_LITERAL, STRING_LITERAL, RAW_STRING_LITERAL, BYTE_LITERAL, BYTE_STRING_LITERAL, RAW_BYTE_STRING_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, LIFETIME_OR_LABEL, '-', '*', '!', '&', '|', '&&', '||', '<', '..', '..=', ';', '::', '#', '{', '}', '[', '('}
line 391:0 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 145:35 mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
line 155:62 no viable alternative at input 'if let Some(value) = *func {\r\n    let Ok(func) = v8::Local::<v8::Function>::try_from(value) else'
line 2156:24 no viable alternative at input 'impl FnMut(&&'
line 2156:33 mismatched input '->' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
line 2162:8 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 2165:76 no viable alternative at input 'impl FnMut(&&'
line 2305:8 mismatched input 'try' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
line 3963:0 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 212:25 extraneous input '&&' expecting {'crate', 'extern', 'fn', 'for', 'impl', 'self', 'Self', 'super', 'unsafe', 'dyn', ''static', 'macro_rules', ''_', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, LIFETIME_OR_LABEL, '*', '!', '&', '<', '_', '...', '::', '?', '[', '('}
line 69:65 mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
line 77:65 mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
line 180:12 no viable alternative at input 'if it.is_stripped() &&\r\n            let'
line 188:8 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 207:8 mismatched input '}' expecting ';'
line 214:8 extraneous input '}' expecting ';'
line 215:8 extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 218:16 no viable alternative at input 'name.'
line 267:96 mismatched input ')' expecting ';'
line 431:0 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 808:37 no viable alternative at input 'if !self.render_redirect_pages {\r\n            let (clean::StrippedItem(box'
line 812:12 extraneous input '}' expecting ';'
line 813:12 extraneous input 'let' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
line 814:98 extraneous input ')' expecting ';'
line 815:12 extraneous input 'let' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
line 816:16 no viable alternative at input 'self.'
line 818:10 no viable alternative at input 'Ok('
line 879:0 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 21:4 mismatched input 'try' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
line 35:4 mismatched input 'try' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
line 358:58 no viable alternative at input '#[cfg(not(any(target_os = "ios")))]\r\n        {\r\n            // Create a channel to receive error or closed message\r\n            let (tx, rx) = std::sync::mpsc::channel();\r\n            let (tx_audio_data, mut rx_audio_data) =\r\n                hbb_common::tokio::sync::mpsc::unbounded_channel();\r\n            // Create a stand-alone inner, add subscribe to audio service\r\n            let conn_id = CLIENT_SERVER.write().unwrap().get_new_id();\r\n            let client_conn_inner = ConnInner::new(conn_id.clone(), Some(tx_audio_data), None);\r\n            // now we subscribe\r\n            CLIENT_SERVER.write().unwrap().subscribe(\r\n                audio_service::NAME,\r\n                client_conn_inner.clone(),\r\n                true,\r\n            );\r\n            let tx_audio = self.sender.clone();\r\n            std::thread::spawn(move || {\r\n                loop {\r\n                    // check if client is closed\r\n                    match rx.try_recv() {\r\n                        Ok(_) | Err(std::sync::mpsc::TryRecvError::Disconnected) => {\r\n                            log::debug!("Exit voice call audio service of client");\r\n                            // unsubscribe\r\n                            CLIENT_SERVER.write().unwrap().subscribe(\r\n                                audio_service::NAME,\r\n                                client_conn_inner,\r\n                                false,\r\n                            );\r\n                            break;\r\n                        }\r\n                        _ => {}\r\n                    }\r\n                    match rx_audio_data.try_recv() {\r\n                        Ok((_instant, msg)) => match &msg.union'
line 326:8 extraneous input '{' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 348:41 no viable alternative at input 'CLIENT_SERVER.'
line 355:24 extraneous input '_' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 358:64 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 359:32 mismatched input '(' expecting {'where', '<', '{'}
line 376:28 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 384:8 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 585:28 no viable alternative at input 'match data {\r\n            Data::Close => {\r\n                let mut misc = Misc::new();\r\n                misc.set_close_reason("".to_owned());\r\n                let mut msg = Message::new();\r\n                msg.set_misc(misc);\r\n                allow_err!(peer.send(&msg).await);\r\n                return false;\r\n            }\r\n            Data::Login((os_username, os_password, password, remember)) => {\r\n                self.handler\r\n                    .handle_login_from_ui(os_username, os_password, password, remember, peer)\r\n                    .await;\r\n            }\r\n            #[cfg(not(feature = "flutter"))]\r\n            Data::ToggleClipboardFile => {\r\n                self.check_clipboard_file_context();\r\n            }\r\n            Data::Message(msg) => {\r\n                allow_err!(peer.send(&msg).await);\r\n            }\r\n            Data::SendFiles((id, path, to, file_num, include_hidden, is_remote)) => {\r\n                log::info!("send files, is remote {}", is_remote);\r\n                let od = can_enable_overwrite_detection(self.handler.lc.read().unwrap().version);\r\n                if is_remote {\r\n                    log::debug!("New job {}, write to {} from remote {}", id, to, path);\r\n                    self.write_jobs.push(fs::TransferJob::new_write(\r\n                        id,\r\n                        path.clone(),\r\n                        to,\r\n                        file_num,\r\n                        include_hidden,\r\n                        is_remote,\r\n                        Vec::new(),\r\n                        od,\r\n                    ));\r\n                    allow_err!(\r\n                        peer.send(&fs::new_send(id, path, file_num, include_hidden))\r\n                            .await\r\n                    );\r\n                } else {\r\n                    match fs::TransferJob::new_read(\r\n                        id,\r\n                        to.clone(),\r\n                        path.clone(),\r\n                        file_num,\r\n                        include_hidden,\r\n                        is_remote,\r\n                        od,\r\n                    ) {\r\n                        Err(err) => {\r\n                            self.handle_job_status(id, -1, Some(err.to_string()));\r\n                        }\r\n                        Ok(job) => {\r\n                            log::debug!(\r\n                                "New job {}, read {} to remote {}, {} files",\r\n                                id,\r\n                                path,\r\n                                to,\r\n                                job.files().len()\r\n                            );\r\n                            self.handler.update_folder_files(\r\n                                job.id(),\r\n                                job.files(),\r\n                                path,\r\n                                !is_remote,\r\n                                true,\r\n                            );\r\n                            #[cfg(not(windows))]\r\n                            let files = job.files().clone();\r\n                            #[cfg(windows)]\r\n                            let mut files = job.files().clone();\r\n                            #[cfg(windows)]\r\n                            if self.handler.peer_platform() != "Windows" {\r\n                                // peer is not windows, need transform \ to /\r\n                                fs::transform_windows_path(&mut files);\r\n                            }\r\n                            self.read_jobs.push(job);\r\n                            self.timer = time::interval(MILLI1);\r\n                            allow_err!(peer.send(&fs::new_receive(id, to, file_num, files)).await);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Data::AddJob((id, path, to, file_num, include_hidden, is_remote)) => {\r\n                let od = can_enable_overwrite_detection(self.handler.lc.read().unwrap().version);\r\n                if is_remote {\r\n                    log::debug!(\r\n                        "new write waiting job {}, write to {} from remote {}",\r\n                        id,\r\n                        to,\r\n                        path\r\n                    );\r\n                    let mut job = fs::TransferJob::new_write(\r\n                        id,\r\n                        path.clone(),\r\n                        to,\r\n                        file_num,\r\n                        include_hidden,\r\n                        is_remote,\r\n                        Vec::new(),\r\n                        od,\r\n                    );\r\n                    job.is_last_job = true;\r\n                    self.write_jobs.push(job);\r\n                } else {\r\n                    match fs::TransferJob::new_read(\r\n                        id,\r\n                        to.clone(),\r\n                        path.clone(),\r\n                        file_num,\r\n                        include_hidden,\r\n                        is_remote,\r\n                        od,\r\n                    ) {\r\n                        Err(err) => {\r\n                            self.handle_job_status(id, -1, Some(err.to_string()));\r\n                        }\r\n                        Ok(mut job) => {\r\n                            log::debug!(\r\n                                "new read waiting job {}, read {} to remote {}, {} files",\r\n                                id,\r\n                                path,\r\n                                to,\r\n                                job.files().len()\r\n                            );\r\n                            self.handler.update_folder_files(\r\n                                job.id(),\r\n                                job.files(),\r\n                                path,\r\n                                !is_remote,\r\n                                true,\r\n                            );\r\n                            job.is_last_job = true;\r\n                            self.read_jobs.push(job);\r\n                            self.timer = time::interval(MILLI1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Data::ResumeJob((id, is_remote)) => {\r\n                if is_remote {\r\n                    if let Some(job) = get_job(id, &mut self.write_jobs) {\r\n                        job.is_last_job = false;\r\n                        allow_err!(\r\n                            peer.send(&fs::new_send(\r\n                                id,\r\n                                job.remote.clone(),\r\n                                job.file_num,\r\n                                job.show_hidden\r\n                            ))\r\n                            .await\r\n                        );\r\n                    }\r\n                } else {\r\n                    if let Some(job) = get_job(id, &mut self.read_jobs) {\r\n                        job.is_last_job = false;\r\n                        allow_err!(\r\n                            peer.send(&fs::new_receive(\r\n                                id,\r\n                                job.path.to_string_lossy().to_string(),\r\n                                job.file_num,\r\n                                job.files.clone()\r\n                            ))\r\n                            .await\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            Data::SetNoConfirm(id) => {\r\n                if let Some(job) = self.remove_jobs.get_mut(&id) {\r\n                    job.no_confirm = true;\r\n                }\r\n            }\r\n            Data::ConfirmDeleteFiles((id, file_num)) => {\r\n                if let Some(job) = self.remove_jobs.get_mut(&id) {\r\n                    let i = file_num as usize;\r\n                    if i < job.files.len() {\r\n                        self.handler.ui_handler.confirm_delete_files(\r\n                            id,\r\n                            file_num,\r\n                            job.files[i].name.clone(),\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            Data::SetConfirmOverrideFile((id, file_num, need_override, remember, is_upload)) => {\r\n                if is_upload {\r\n                    if let Some(job) = fs::get_job(id, &mut self.read_jobs) {\r\n                        if remember {\r\n                            job.set_overwrite_strategy(Some(need_override));\r\n                        }\r\n                        job.confirm(&FileTransferSendConfirmRequest {\r\n                            id,\r\n                            file_num,\r\n                            union'
line 397:16 extraneous input 'return' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 405:38 no viable alternative at input 'Data::ToggleClipboardFile =>'
line 410:12 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 413:16 extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 416:24 no viable alternative at input 'self.'
line 430:16 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 451:32 no viable alternative at input 'self.'
line 459:28 extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 461:28 extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 463:28 extraneous input 'if' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 470:24 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 483:20 extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 516:32 no viable alternative at input 'self.'
line 543:20 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 556:20 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 585:33 mismatched input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 586:36 missing ':' at '('
line 603:33 mismatched input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 604:36 missing ':' at '('
line 614:20 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 630:24 no viable alternative at input 'self.'
line 660:16 extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 678:12 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 691:16 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 713:16 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 737:20 no viable alternative at input 'self.'
line 751:20 no viable alternative at input 'self.'
line 761:20 no viable alternative at input 'self.'
line 769:12 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 858:18 no viable alternative at input 'match &vf.union'
line 858:24 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 859:16 mismatched input '(' expecting {'where', '<', '{'}
line 915:25 no viable alternative at input 'if let Ok(msg_in) = Message::parse_from_bytes(&data) {\r\n            match msg_in.union'
line 915:31 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 916:20 mismatched input '(' expecting {'where', '<', '{'}
line 946:74 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 947:24 mismatched input '(' expecting {'where', '<', '{'}
line 955:28 no viable alternative at input 'self.'
line 959:55 no viable alternative at input 'Client::try_start_clipboard('
line 962:55 no viable alternative at input 'Client::try_start_clipboard('
line 970:28 extraneous input 'if' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 973:51 mismatched input 'move' expecting {'extern', 'fn', 'unsafe'}
line 985:62 no viable alternative at input 'crate::plugin::handle_listen_event('
line 1009:40 no viable alternative at input 'update_clipboard('
line 1011:24 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1024:20 no viable alternative at input 'Some('
line 1028:35 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1029:28 mismatched input '(' expecting {'where', '<', '{'}
line 1031:28 extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1033:28 extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1035:28 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1044:35 no viable alternative at input 'job.'
line 1059:53 extraneous input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1059:59 mismatched input '(' expecting {'where', '<', '{'}
line 1071:40 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1093:61 extraneous input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1093:67 mismatched input '(' expecting {'where', '<', '{'}
line 1099:48 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1105:65 extraneous input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1105:71 mismatched input '(' expecting {'where', '<', '{'}
line 1115:52 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1129:61 extraneous input ':' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1129:67 mismatched input '(' expecting {'where', '<', '{'}
line 1135:48 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1139:44 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1171:69 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1172:24 mismatched input '(' expecting {'where', '<', '{'}
line 1181:24 extraneous input 'match' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1185:78 no viable alternative at input 'crate::flutter::update_text_clipboard_required('
line 1192:78 no viable alternative at input 'crate::flutter::update_text_clipboard_required('
line 1240:24 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1255:24 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1266:33 extraneous input ')' expecting ';'
line 1267:28 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1272:24 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1287:24 extraneous input '{' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1298:33 extraneous input ')' expecting ';'
line 1299:28 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1323:28 no viable alternative at input 'self.'
line 1327:24 no viable alternative at input 'Some('
line 1334:20 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1337:24 no viable alternative at input 'Some('
line 1357:79 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1358:24 mismatched input '(' expecting {'where', '<', '{'}
line 1373:33 no viable alternative at input 'link ='
line 1384:24 extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1386:32 no viable alternative at input 'self.'
line 1395:24 extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1417:27 no viable alternative at input 'match notification.union'
line 1417:33 extraneous input '{' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
line 1418:16 mismatched input '(' expecting {'where', '<', '{'}
line 1551:86 no viable alternative at input '#[cfg(feature = "flutter")]\r\n        if let Some(hbb_common::message_proto::cliprdr::Union::FormatList(_)) = &clip.union'
line 1551:8 extraneous input 'if' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 1551:92 missing {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER} at '{'
line 1552:12 mismatched input 'if' expecting {'pub', 'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '#'}
line 1566:12 extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
line 408:15 token recognition error at: '\'
line 413:15 token recognition error at: '\'
line 418:15 token recognition error at: '\'
line 423:15 token recognition error at: '\'
line 428:15 token recognition error at: '\'
line 754:13 token recognition error at: '\'
line 759:13 token recognition error at: '\'
line 766:14 token recognition error at: '\'
line 888:20 token recognition error at: '\'
line 894:20 token recognition error at: '\'
line 894:22 token recognition error at: '\'
line 900:28 token recognition error at: '\'

进程已结束，退出代码为 0
